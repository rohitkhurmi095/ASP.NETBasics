@model ASP.NETWebApp.Models.Product

@{
    ViewBag.Title = "Create";
}

<style>
    .validation-summary-errors {
        color: navy !important;
    }
</style>

<h2>Create Product</h2>
<br />


<!--===============-->
<!--- HTML HELPERS -->
<!--================-->
<!-- ADD PRODUCT FORM -->

@using (Html.BeginForm("Create", "Products", FormMethod.Post, new { enctype = "multipart/form-data" }))
{

    <div class="form-row">
        <!--Product Name-->
        <div class="form-group col-md-6">
            @Html.LabelFor(Model => Model.ProductName)
            @Html.TextBoxFor(Model => Model.ProductName, new { @class = "form-control", placeholder = "Product Name" })
            <!--Error Message-->
            <span class="text-danger">@Html.ValidationMessageFor(Model => Model.ProductName)</span>
        </div>

        <!-- Price-->
        <div class="form-group col-md-6">
            @Html.LabelFor(Model => Model.Price)
            @Html.TextBoxFor(Model => Model.Price, new { @class = "form-control", placeholder = "Price" })
            <!-- Error Message-->
            <span class="text-danger">@Html.ValidationMessageFor(Model => Model.Price)</span>
        </div>
    </div>


    <div class="form-row">
        <!--DateOfPurchase-->
        <div class="form-group col-md-6">
            @Html.LabelFor(Model => Model.DateOfPurchase)
            <input type="date" class="form-control" id="DateOfPurchase" name="DateOfPurchase" placeholder="Date of Purchase" data-val="true" data-val-required="The Purchase Date Field is required">
            <!-- Error Message-->
            <span class="text-danger">@Html.ValidationMessageFor(Model => Model.DateOfPurchase)</span>
        </div>

        <!-- STATIC LIST -->
        <!-- Availability Status:DROPDOWN LIST(InStock/OutofStock)-->
        <div class="form-group col-md-6">
            @Html.LabelFor(Model => Model.AvailabilityStatus)
            @Html.DropDownListFor(Model => Model.AvailabilityStatus, new List<SelectListItem>(){
                new SelectListItem() {Text="In Stock", Value="InStock"},
                new SelectListItem() {Text="Out of Stock", Value="OutOfStock"}
            }, "Please Select", new { @class = "form-control" })
            <!--Error Message-->
            <span class="text-danger">@Html.ValidationMessageFor(Model=>Model.AvailabilityStatus)</span>
        </div>
    </div>


    <!--==DYNAMIC LIST-->
    <div class="form-row">
        <!--CategoryId: NAME_DROP_DOWN-->
        <div class="form-group col-md-6">
            @Html.LabelFor(Model => Model.CategoryId)
            @Html.DropDownListFor(Model => Model.CategoryId, new SelectList(ViewBag.Categories, "CategoryId", "CategoryName"),
            "Please Select", new { @class = "form-control" })
            <!--Error Message-->
            <span class="text-danger">@Html.ValidationMessageFor(Model => Model.CategoryId)</span>
        </div>

        <!--BrandId: NAME_DROP_DOWN-->
        <div class="form-group col-md-6">
            @Html.LabelFor(Model => Model.BrandId)
            @Html.DropDownListFor(Model => Model.BrandId, new SelectList(ViewBag.Brands, "BrandId", "BrandName"),
            "Please Select", new { @class = "form-control" })
            <!--Error Message-->
            <span class="text-danger">@Html.ValidationMessageFor(Model => Model.BrandId)</span>
        </div>
    </div>


    <div class="form-row">
        <!--=======================================-->
        <!-- **IMAGE UPLOAD as base64String in Db**-->
        <!--=======================================-->
        <!---UPLOAD PREVIEW Script -->
        <script type="text/javascript">
            function imagePreview(input) {
                if (input.files && input.files[0]) {
                    var fildr = new FileReader();
                    fildr.onload = function (e) {
                        $('#imgPreview').attr('src', e.target.result);
                    }
                    fildr.readAsDataURL(input.files[0])
                }
            }
        </script>

        <div class="form-group  col-md-6">
            <label for="Photo">Image</label>
            <!-- File Uploader-->
            <input type="file" class="form-control-file" id="Photo" name="Photo" onchange="imagePreview(this);" data-val="true" data-val-required="The Image Field is required" />
            <!-- Upload Preview-->
            <img id="imgPreview" alt="uploadPreview" height="150" width="150" class="mt-1" src="~/images/default.jpg" />
            <br />
            <!--Error Message-->
            <span class="field-validation-valid text-danger" data-valmsg-for="Photo" data-valmsg-replace="true"></span>
        </div>
        <!--=======================================-->
        <!--Quantity-->
        <div class="form-group col-md-6">
            @Html.LabelFor(Model => Model.Quantity)
            @Html.TextBoxFor(Model => Model.Quantity, new { @class = "form-control", placeholder = "Quantity" })
            <!--Error Message-->
            <span class="text-danger">@Html.ValidationMessageFor(Model => Model.Quantity)</span>
        </div>
    </div>


    <div class="form-group">
        <!--Active: CHECKBOX-->
        @Html.CheckBoxFor(Model=>Model.Active,new { @class = "form-input-check",value="true"})
        <span class="text-danger">@Html.LabelFor(Model=>Model.Active,new {@class="form-input-check"})</span>
    </div>


    <!-- VALIDATION SUMMARY(DISPLAY ALL ERRORS as List) -->
    @Html.ValidationSummary()

    <!-- Create |Cancel Button-->
    <button type="submit" class="btn btn-success">Create</button>
    <a class="btn btn-danger" href="@Url.Action("Index", "Products")">Cancel</a>
}















